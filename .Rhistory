rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(DESeq2)
library(dplyr)
dat = read.csv("data/AllRegions_count_filtered.csv", row.names = 1)
dat[1:5, 1:5]
meta = read.csv("data/meta_clean_complete.csv", row.names = 1)
library(biomaRt)
mart = useMart("Ensembl")
mart = useMart("ensembl")
listDatasets(mart)[1:5, ]
listDatasets(mart) %>% filter(grepl("rat", description))
listDatasets(mart) %>% filter(grepl("Rat", description))
mart = useDataset("rnorvegicus_gene_ensembl", mart)
listAttributes(mart)[1:5, ]
listAttributes(mart) %>% filter(grepl("symbol", description)|grepl("Symbol", description))
listAttributes(mart) %>% filter(grepl("symbol", name))
listFilters(mart)[1:5, ]
listFilters(mart) %>% filter(grepl("ensembl", description))
listFilters(mart) %>% filter(grepl("ensembl", name))
dat = read.csv("data/AllRegions_count_filtered.csv", row.names = 1)
gname.match = getBM(atrributes = c("ensembl_gene_id", "mgi_symbol", "rgd_symbol"),
filters = "ensembl_gene_id",
values = rownames(dat), mart)
?getBM
rownames(dat)
gname.match = getBM(atrributes = c("ensembl_gene_id", "mgi_symbol", "rgd_symbol"),
filters = "ensembl_gene_id",
values = rownames(dat),
mart)
gname.match = getBM(attributes = c("ensembl_gene_id", "mgi_symbol", "rgd_symbol"),
filters = "ensembl_gene_id",
values = rownames(dat),
mart)
head(gname.match)
head(gname.match, n = 20)
dim(gname.match)
dim(dat)
gname.match = data.frame(ensembl_gene_id = rownames(dat)) %>% left_join(gname.match)
head(gname.match)
dim(gname.match)
dup.genes = gname.match$ensembl_gene_id[duplicated(gname.match$ensembl_gene_id)]
dup.genes
gname.match[gname.match$ensembl_gene_id%in%dup.genes, ]
gname.match[gname.match$ensembl_gene_id%in%dup.genes, ]
gname.match0 = gname.match %>%
split(gname.match$ensembl_gene_id) %>%
lapply(function(a.gene.df){
if(nrow(a.gene.df)>1){
data.frame(ensembl_gene_id = a.gene.df$ensembl_gene_id[1],
mgi_symbol = a.gene.df$mgi_symbol[1],
rgd_symbol = paste0(a.gene.df$rgd_symbol, sep = ","))
}else{
a.gene.df
}
})
gname.match0[[1]]
paste(gname.match0[[1]]$rgd_symbol, sep = ",")
paste(gname.match0[[1]]$rgd_symbol, sep = ",", collapse = TRUE)
paste(gname.match0[[1]]$rgd_symbol,  collapse = ",")
gname.match0 = gname.match %>%
split(gname.match$ensembl_gene_id) %>%
lapply(function(a.gene.df){
if(nrow(a.gene.df)>1){
data.frame(ensembl_gene_id = a.gene.df$ensembl_gene_id[1],
mgi_symbol = a.gene.df$mgi_symbol[1],
rgd_symbol = paste(a.gene.df$rgd_symbol, collapse = ","))
}else{
a.gene.df
}
})
gname.match0【【1
gname.match0[[1]]
gname.match0[[2]]
gname.match0[[3]]
gname.match0[[4]]
gname.match0[[5]]
gname.match0[[6]]
gname.match0[[7]]
gname.match0[[8]]
gname.match0[[9]]
gname.match0[[10]]
gname.match = do.call(rbind.data.frame, gname.match0)
head(gname.match, n = 20)
write.csv(gname.match[, c(1, 3)], "data/GeneSymbolMatch.csv")
rm(list = ls())
dat = read.csv("data/AllRegions_count_filtered.csv", row.names = 1)
meta = read.csv("data/meta_clean_complete.csv", row.names = 1)
gene_match = read.csv("data/GeneSymbolMatch.csv", row.names = 1)
head(gene_match)
head(meta)
table(meta$Sex)
table(meta$Trt)
meta = read.csv("data/meta_clean_complete.csv", row.names = 1) %>%
filter(Trt !="?") %>%
mutate(Sex = factor(Sex, levels = c("Female", "Male")),
Trt = factor(Trt, levels = c("Naive", "Intox", "Withdrawal", "Abstinence")))
regions = unique(meta$Region)
i = 1
a.region = regions[i]
a.meta = meta %>% filter(Region == a.region)
a.dat = dat[, a.meta$Sample.ID]
dds = DESeqDataSetFromMatrix(countData = as.matrix(a.dat),
colData = a.meta,
design = ~Trt*Sex)
dim(a.meta)
a.meta
dim(a.dat)
dim(a.meta)
dds = DESeqDataSetFromMatrix(countData = as.matrix(a.dat),
colData = a.meta,
design = ~Trt*Sex)
sum(!is.integer(a.dat))
which(!is.integer(a.dat), arr.ind = TRUE)
a.dat[1:5, 1:5]
which(!is.integer(a.dat))
sum(is.integer(a.dat))
sum(is.integer(as.matrix(a.dat)))
xx = as.matrix(a.dat)
dim(xx)
xx[1:5, 1:5]
is.integer(xx[1, 1])
class(xx[1,1])
as.integer(xx[1, 1])
as.integer(xx[1, 1])-x[1, 1]
as.integer(xx[1, 1])-xx[1, 1]
(as.integer(xx[1, 1])-xx[1, 1])
xx = as.integer(as.matrix(a.dat))
dim(xx)
xx[1:5]
xx = as.integer(a.dat)
dds.Sex2 = DESeqDataSetFromMatrix(countData = round(as.matrix(a.dat[, a.meta.Sex$ID])),
colData = a.meta.Sex,
design= ~ Genotype*Condition)
dds = DESeqDataSetFromMatrix(countData = round(as.matrix(a.dat)),
colData = a.meta,
design = ~Trt*Sex)
all(round(as.matrix(a.dat))==as.matrix(a.dat))
which(round(as.matrix(a.dat))!=as.matrix(a.dat), arr.ind = TRUE)
which(round(as.matrix(a.dat))!=as.matrix(a.dat), arr.ind = TRUE) [1:5, ]
a.dat[6, 1]
a.dat[12, 1]
dds = DESeqDataSetFromMatrix(countData = round(as.matrix(a.dat)),
colData = a.meta,
design = ~Trt*Sex)
dim(round(as.matrix(a.dat)))
resultsNames(dds)
resultsNames(dds)
#should we add RIN?
dds = DESeq(dds)
resultsNames(dds)
results(dds, name = "Trt_Intox_vs_Naive")[1:5, ]
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/yusi/WGCNA_Newman")
library(RCy3)
#open cytoscape from your laptop
cytoscapePing ()
edges = read.csv(paste0("network_blue.csv"))
edges$interaction = "interacts"
colnames(edges)[1:2] = c("source", "target")
nodes = read.csv(paste0("hub_blue.csv"))
colnames(nodes)[1] = "id"
createNetworkFromDataFrames(nodes,edges, title="blue_test", collection="WGCNA")
head(edges)
head*nodes
head(nodes)
createNetworkFromDataFrames(nodes,edges, title="blue_test", collection="WGCNA")
rm(list = ls())
createNetworkFromDataFrames(nodes,edges, title="blue_test", collection="WGCNA")
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/yusi/WGCNA_Newman")
edges = read.csv(paste0("network_blue.csv"))
edges$interaction = "interacts"
colnames(edges)[1:2] = c("source", "target")
nodes = read.csv(paste0("hub_blue.csv"))
colnames(nodes)[1] = "id"
createNetworkFromDataFrames(nodes,edges, title="blue_test", collection="WGCNA")
#open cytoscape from your laptop
cytoscapePing ()
createNetworkFromDataFrames(nodes,edges, title="blue_test", collection="WGCNA")
WGCNA.dir = "/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Diniz/proteomics/BaselineLLDvsHC/WGCNA/modules_SexGroups/power3"
Network.dir = paste0(WGCNA.dir, "/Hub_Gene_Detection")
edges = read.csv(paste0(Network.dir, "/MALE_LLD_network_black_cut0.9.csv"))
edges$interaction = "interacts"
colnames(edges)[1:2] = c("source", "target")
nodes = read.csv(paste0(Network.dir, "/MALE_LLD_hub_black_cut0.9.csv"))
colnames(nodes)[1] = "id"
head(nodes)
head(edges)
createNetworkFromDataFrames(nodes,edges, title="MALE_BLACK_test", collection="Proteomics_baseline_WGCNA")
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/yusi/WGCNA_Newman")
edges = read.csv(paste0("network_blue.csv"))
edges$interaction = "interacts"
colnames(edges)[1:2] = c("source", "target")
nodes = read.csv(paste0("hub_blue.csv"))
colnames(nodes)[1] = "id"
edges
createNetworkFromDataFrames(nodes,edges, title="blue_test", collection="WGCNA")
rm(list = ls())
WGCNA.dir = "/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Diniz/proteomics/BaselineLLDvsHC/WGCNA/modules_SexGroups/power3"
Network.dir = paste0(WGCNA.dir, "/Hub_Gene_Detection")
edges = read.csv(paste0(Network.dir, "/MALE_LLD_network_black_cut0.9.csv"))
edges$interaction = "interacts"
colnames(edges)[1:2] = c("source", "target")
nodes = read.csv(paste0(Network.dir, "/MALE_LLD_hub_black_cut0.9.csv"))
colnames(nodes)[1] = "id"
createNetworkFromDataFrames(nodes,edges, title="MALE_BLACK_test2", collection="Proteomics_baseline_WGCNA")
head(edges)
head(nodes)
all(c(edges$source, edges$target)%in%nodes$id)
all(nodes$id%in%c(edges$source, edges$target))
createNetworkFromDataFrames(nodes[, 1:3],edges, title="blue_test", collection="WGCNA")
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/yusi/WGCNA_Newman")
edges = read.csv(paste0("network_blue.csv"))
edges$interaction = "interacts"
colnames(edges)[1:2] = c("source", "target")
nodes = read.csv(paste0("hub_blue.csv"))
colnames(nodes)[1] = "id"
all(c(edges$source, edges$target)%in%nodes$id)
all(nodes$id%in%c(edges$source, edges$target))
library(shiny)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
hdir = "/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/RShiny/test"
Robj = readRDS(paste0(hdir, "/OneGroup4/save/FormattedData.rds"))
db = readRDS(paste0(hdir, "/OneGroup4/save/db.rds"))
write.csv(Robj$rhythm, paste(db$working.dir, "ParamEst.csv", sep = "/"))
Robj$rhythm
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
33333333333333
33333333333333333333333333333333333333333333333333333
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
?pdf
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
library(shiny)
library(DT)
ui <- fluidPage(
selectizeInput(
"foo",
label = "inputs",
choices = "",
multiple = T,
options = list(
delimiter = " ",
create = T
)
),
textOutput("results"),
hr(),
"textInput",
textInput("pasted1", "paste text here"),
h5("Raw hex code points (20 is space, 0a is linefeed"),
textOutput("verb1"),
h5("Vector of results from splitting on '\\n'"),
textOutput("split1"),
hr(),
"textAreaInput",
textAreaInput("pasted2", "paste text here"),
h5("Raw hex code points (20 is space, 0a is linefeed"),
textOutput("verb2"),
h5("Vector of results from splitting on '\\n'"),
textOutput("split2"),
dataTableOutput("table1")
)
server <- function(input, output, session) {
output$results <- renderText(
paste(paste("item", input$foo))
)
output$verb1 <- renderPrint(charToRaw(input$pasted1))
output$split1 <- renderText(
paste(strsplit(input$pasted1, "\n"))
)
output$verb2 <- renderPrint(charToRaw(input$pasted2))
output$split2 <- renderText(
paste(strsplit(input$pasted2, "\n"))
)
df <- reactive({
df <- as.data.frame(paste(strsplit(input$pasted2, "\n")))
})
output$table1 <- renderDataTable({
df()
}, filter="top", class = 'hover cell-border stripe', editable= TRUE,extensions= 'Buttons',
options = list(dom = 'Bfrtip',pageLength =10,
buttons = c('copy','csv','excel','pdf','print'), scrollX=TRUE),server=FALSE)
}
shinyApp(ui, server)
?selectizeInput
ui <- fluidPage(
selectizeInput(
"foo",
label = "inputs",
choices = "",
multiple = T,
options = list(
delimiter = " ",
create = T
)
),
textOutput("results"),
hr(),
"textInput",
textInput("pasted1", "paste text here"),
h5("Raw hex code points (20 is space, 0a is linefeed"),
textOutput("verb1"),
h5("Vector of results from splitting on '\\n'"),
textOutput("split1"),
hr(),
"textAreaInput",
textAreaInput("pasted2", "paste text here"),
h5("Raw hex code points (20 is space, 0a is linefeed"),
textOutput("verb2"),
h5("Vector of results from splitting on '\\n'"),
textOutput("split2"),
dataTableOutput("table1")
)
server <- function(input, output, session) {
output$results <- renderText(
paste(paste("item", input$foo))
)
output$verb1 <- renderPrint(charToRaw(input$pasted1))
output$split1 <- renderText(
paste(strsplit(input$pasted1, "\n"))
)
output$verb2 <- renderPrint(charToRaw(input$pasted2))
output$split2 <- renderText(
paste(strsplit(input$pasted2, "\n"))
)
df <- reactive({
df <- as.data.frame(paste(strsplit(input$pasted2, "\n")))
})
output$table1 <- renderDataTable({
df()
}, filter="top", class = 'hover cell-border stripe', editable= TRUE,extensions= 'Buttons',
options = list(dom = 'Bfrtip',pageLength =10,
buttons = c('copy','csv','excel','pdf','print'), scrollX=TRUE),server=FALSE)
}
shinyApp(ui, server)
?textAreaInput
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
load("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/SCZvsControl/DCP_output.rData")
CP.obj <- DiffCircaPipeline::DCP_Rhythmicity(x1 = x1, x2 = x2,period = 12)
dR2.LR <- DiffCircaPipeline::DCP_DiffR2(CP.obj, method = "LR")
head(dR2.LR)
a.plot = DiffCircaPipeline::DCP_ScatterPlot(CP.obj, "DPM1")
a.plot
DiffCircaPipeline::DCP_PlotDisplay(a.plot)
length(a.plot)
a.plot2 = DiffCircaPipeline::DCP_ScatterPlot(CP.obj, c("CD99", "DPM1"))
length(a.plot2)
length(a.plot2[[1]])
length(a.plot[[1]])
1:2
a.plot1 = DiffCircaPipeline::DCP_ScatterPlot(CP.obj$x1, "DPM1")
length(a.plot1)
a.plot1 = DiffCircaPipeline::DCP_ScatterPlot(CP.obj$x1, c("CD99", "DPM1"))
a.plot1
class(a.plot1)
DCP_PlotDisplay = function(x = DCP_ScatterPlot(x, genes.plot = NULL,
Info1 = "gI", Info2 = "gII",
filename = NULL, height = 8, width = 8), id = 1:2){
if(length(x)==1){
return(x)
}else{
return(lapply(id, function(a.g){
gridExtra::grid.arrange(x[[1]][[a.g]], x[[2]][[a.g]], ncol = 2)
}))
}
}
DCP_PlotDisplay(a.plot)
DCP_PlotDisplay = function(x = DCP_ScatterPlot(x, genes.plot = NULL,
Info1 = "gI", Info2 = "gII",
filename = NULL, height = 8, width = 8)){
if(length(x)==1){
return(x)
}else{
return(lapply(1:length(x), function(a.g){
gridExtra::grid.arrange(x[[1]][[a.g]], x[[2]][[a.g]], ncol = 2)
}))
}
}
DCP_PlotDisplay(a.plot)
DCP_PlotDisplay = function(x = DCP_ScatterPlot(x, genes.plot = NULL,
Info1 = "gI", Info2 = "gII",
filename = NULL, height = 8, width = 8)){
if(length(x)==1){
return(x)
}else{
return(lapply(1:length(x[[1]]), function(a.g){
gridExtra::grid.arrange(x[[1]][[a.g]], x[[2]][[a.g]], ncol = 2)
}))
}
}
DCP_PlotDisplay(a.plot)
DCP_PlotDisplay(a.plot2)
devtools::install_github("DiffCircaPipeline/Rpackage")
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
DiffCircaPipeline::DCP_PlotDisplay(a.plot$p)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
Robj = readRDS(paste0(hdir, "/TwoGroups2/save/FormattedData.rds"))
hdir = "/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/RShiny/test"
Robj = readRDS(paste0(hdir, "/TwoGroups2/save/FormattedData.rds"))
a.plot = DiffCircaPipeline::DCP_ScatterPlot(CP.obj, "gene 1")
a.plot = DiffCircaPipeline::DCP_ScatterPlot(Robj, "gene 1")
a.plot1 = DiffCircaPipeline::DCP_ScatterPlot(Robj$x1, c("gene 1", "gene 2"))
a.plot = DiffCircaPipeline::DCP_ScatterPlot(Robj, "gene 1")
a.plot1 = DiffCircaPipeline::DCP_ScatterPlot(Robj$x1, c("gene 1", "gene 2"))
a.plot1 = DiffCircaPipeline::DCP_ScatterPlot(Robj$x1, c("gene 1", "gene 2"))
a.plot2 = DiffCircaPipeline::DCP_ScatterPlot(Robj, c("gene 1", "gene 2"))
