sum(DCP_dR2_perm$p.R2<0.05&DCP_dR2_perm$delta.R2<0)
sum(DCP_dR2_perm$p.R2<0.05&DCP_dR2_perm$delta.R2>0)
CMres2 = readxl::read_xlsx("/Users/xiangningxue/Downloads/41467_2019_11335_MOESM8_ESM.xlsx")
dim(CMres2)
708+707-31
sum(CMres2$R2losePvalue<0.05)
sum(CMres2$R2gainPvalue<0.05)
sum(CMres2$R2gainPvalue*2<0.05)
sum(CMres2$R2losePvalue*2<0.05)
df = data.frame(ID = background.genes,
R2up = as.numeric(background.genes %in% (DCP_dR2 %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname))),
R2down = as.numeric(background.genes %in% (DCP_dR2 %>% filter(p.R2<0.05&delta.R2<0) %>% pull(gname)))
)
write.csv(df, paste0("IPA_Input/TOJR0.1_dR2.csv"), row.names = FALSE)
df = data.frame(ID = background.genes,
R2up = as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname))),
R2down = as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.05&delta.R2<0) %>% pull(gname)))
)
write.csv(df, paste0("IPA_Input/TOJR0.1_dR2_perm.csv"), row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
dat.SCN = read.csv("data/SCN_count.csv", row.names = 1)
dat.b12 = read.csv("data/B12merged_count.csv", row.names = 1)
dat.b3 = read.csv("data/Batch3_count.csv", row.names = 1)
dat.all = cbind.data.frame(dat.SCN, dat.b12, dat.b3)
meta.all = read.csv("data/meta_clean_complete.csv", row.names = 1) %>% filter(Trt!="?") %>% arrange(Region)
dat.all = dat.all[, meta.all$Sample.ID]
boxplot(log2(dat.all+1), col = meta.all$Batch)
boxplot(log2(dat.all+1), col = factor(meta.all$Batch))
filter.data.all = edgeR::filterByExpr(dat.all, design = model.matrix(~Sex+Trt+Region, data = meta.all))
boxplot(log2(dat.all[filter.data.all, ]+1), col = factor(meta.all$Batch))
dat.all[filter.data.all, ][1:5, 1:5]
sum(filter.data.all)
sum(filter.data.all&(!filter.data.SCN))
dat.SCN = read.csv("data/SCN_count.csv", row.names = 1)
meta.SCN = read.csv("data/meta_clean_complete.csv", row.names = 1) %>% filter(Region == "SCN") %>% filter(Trt!="?")
dat.SCN = dat.SCN[, meta.SCN$Sample.ID]
filter.data.SCN = edgeR::filterByExpr(dat.SCN, design = model.matrix(~Sex+Trt, data = meta.SCN))
data.SCN.filtered = dat.SCN[filter.data.SCN, ]
dat.b12 = read.csv("data/B12merged_count.csv", row.names = 1)
dat.b3 = read.csv("data/Batch3_count.csv", row.names = 1)
dat.three = cbind.data.frame(dat.b12, dat.b3)
meta.three = meta.SCN = read.csv("data/meta_clean_complete.csv", row.names = 1) %>%
filter(Region != "SCN") %>% filter(Trt!="?")
# all(c(colnames(dat.b12), colnames(dat.b3)) == meta.three$Sample.ID)
dat.three = dat.three[, meta.three$Sample.ID]
filter.data.three = edgeR::filterByExpr(dat.three, design = model.matrix(~Sex+Trt+Region, data = meta.three))
sum(filter.data.all&(!filter.data.SCN))
sum((filter.data.all)&(!filter.data.SCN))
sum((!filter.data.all)&(filter.data.SCN))
sum((!filter.data.all)&(filter.data.three))
?edgeR::filterByExpr
meta.all
tail(meta.all)
dat.all[boxplot(dat.all[(!filter.data.all)&(filter.data.SCN), col = factor(meta.all$Batch)])]
boxplot(dat.all[(!filter.data.all)&(filter.data.SCN), col = factor(meta.all$Batch)])
boxplot(dat.all[(!filter.data.all)&(filter.data.SCN)], col = factor(meta.all$Batch))
boxplot(dat.all[(!filter.data.all)&(filter.data.SCN), ], col = factor(meta.all$Batch))
boxplot(log2(dat.all[(!filter.data.all)&(filter.data.SCN), ]+2), col = factor(meta.all$Batch))
boxplot(log2(dat.all[(filter.data.all)&(!filter.data.SCN), ]+2), col = factor(meta.all$Batch))
boxplot(log2(dat.all[(!filter.data.all)&(!filter.data.SCN), ]+2), col = factor(meta.all$Batch))
boxplot(log2(dat.all[(!filter.data.all)&(filter.data.SCN), ]+2), col = factor(meta.all$Batch), main = "include in SCN only")
sum((filter.data.all)&(filter.data.SCN))
sum((!filter.data.all)&(filter.data.SCN))
boxplot(log2(dat.all[(filter.data.all)&(!filter.data.SCN), ]+2), col = factor(meta.all$Batch), main = "include in All filtered but not SCN")
boxplot(log2(dat.all[(!filter.data.all)&(filter.data.three), ]+2), col = factor(meta.all$Batch), main = "include in three filtered but not all")
sum((!filter.data.all)&(filter.data.three))
boxplot(log2(dat.all[(filter.data.all)&(!filter.data.three), ]+2), col = factor(meta.all$Batch), main = "include in All filtered but not three")
sum((filter.data.all)&(!filter.data.three))
boxplot(log2(dat.all[(!filter.data.all)&(filter.data.SCN), meta.SCN]+1), col = meta.SCN$Trt)
meta.SCN$Trt
boxplot(log2(dat.all[(!filter.data.all)&(filter.data.SCN), meta.SCN$Sample.ID]+1), col = meta.SCN$Trt)
boxplot(log2(dat.all[(!filter.data.all)&(filter.data.SCN), meta.SCN$Sample.ID]+1), col = factor(meta.SCN$Trt))
boxplot(log2(dat.all[(!filter.data.all)&(filter.data.SCN), meta.SCN$Sample.ID]+2), col = factor(meta.SCN$Trt))
boxplot(log2(dat.all[(!filter.data.all)&(filter.data.SCN), meta.SCN$Sample.ID]+1), col = factor(meta.SCN$Trt))
boxplot(log2(dat.all[(!filter.data.all)&(filter.data.SCN), meta.SCN$Sample.ID]+1), col = factor(meta.SCN$Sex))
boxplot(log2(dat.all[(!filter.data.all)&(filter.data.SCN), meta.SCN$Sample.ID]+1)[1, ], col = factor(meta.SCN$Trt))
lostSCNgenes = dat.SCN[(!filter.data.all)&(filter.data.SCN), meta.SCN$Sample.ID], ]
lostSCNgenes = dat.SCN[(!filter.data.all)&(filter.data.SCN),  ]
dim(lostSCNgenes)
fit = limma::lmFit(lostSCNgenes, design = model.matrix(~Sex+Trt, data = meta.SCN))
dim(meta.SCN)
meta.SCN$Sample.ID
dat.SCN = read.csv("data/SCN_count.csv", row.names = 1)
meta.SCN = read.csv("data/meta_clean_complete.csv", row.names = 1) %>% filter(Region == "SCN") %>% filter(Trt!="?")
dat.SCN = dat.SCN[, meta.SCN$Sample.ID]
lostSCNgenes = dat.SCN[(!filter.data.all)&(filter.data.SCN),  ]
fit = limma::lmFit(lostSCNgenes, design = model.matrix(~Sex+Trt, data = meta.SCN))
fit = limma::eBayes(fit)
fit.res = limma::topTable(fit)
head(fit.res)
fit.res
fit = limma::lmFit(lostSCNgenes, design = model.matrix(~Sex*Trt, data = meta.SCN))
fit = limma::eBayes(fit)
fit.res = limma::topTable(fit)
head(fit.res)
hist(fit.res$P.Value)
fit.res = limma::topTable(fit, n= nrow(fit))
hist(fit.res$P.Value)
lostSCNgenes = limma::voom(lostSCNgenes)
lostSCNgenes[1:5, 1:5]
boxplot(lostSCNgenes$E)
lostSCNgenes = limma::voom(log(lostSCNgenes+1))
lostSCNgenes = limma::voom(lostSCNgenes)
lostSCNgenes = limma::voom(lostSCNgenes, design = ~Sex*Trt, data = meta.SCN)
?limma::voom
lostSCNgenes = limma::voom(lostSCNgenes, design = model.matrix(~Sex*Trt, data = meta.SCN))
fit = limma::lmFit(lostSCNgenes$E, design = model.matrix(~Sex*Trt, data = meta.SCN))
fit = limma::eBayes(fit)
fit.res = limma::topTable(fit, n= nrow(fit))
head(fit.res)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
COVARIATES.CORRELATION = CovariateAnalysis::getAssociationStatistics(meta2.clean, PVAL = 0.05)
library(psych)
COVARIATES.CORRELATION = CovariateAnalysis::getAssociationStatistics(meta2.clean, PVAL = 0.05)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
dat2 = read.csv("data/phase2/phase2_imputation_mice_pmm_avg.csv", row.names = 1)
meta2 = read.csv("data/phase2/clean_IRL-GREY-Phase-2-Clinical-BMKs-meta.csv", row.names = 1)
meta2.cols.del = c("cnt", "attention_is", "language_is", "mvcis", "immediate_memory_is", "mdmis",
"bsi",	"madrs", "hrs17tot", "depstr", "mospcs_rand", "mosmcs_rand", "pain_rand",
"hrs17_rand", "sis_rand", "sastot_rand",	"barnes_rand", "aims_q8_rand", "weight_rand", "weight_kg_rand",
"qtc_rand", "sas_endph2", "barnes_endph2", "aims_q8_endph2", "weight_endph2", "weight_kg_endph2",
"bmi_endph2", "chol_endph2", "glu_endph2", "qtc_endph2", "trig_endph2", "hdl_endph2", "ldl_endph2",
"insulin_endph2", "dexa_totalfat_endph2", "dexa_trunk_endph2", "dexa_percentfat_endph2",
"sas_worsen_max", "aims_worsen_max", "barnes_worsen_max", "sas_worsen", "aims_worsen", "barnes_worsen",
"cumulative_dose", "stop_med", "barnes_max", "aims_q8_max", "sastot_max")
meta2.cols.corr = c("cell", "stphase", "endphase", "first_response_date", "first_response_wk", "weeks_in_phase2") #these columns will also be deleted because they contain highly correlated info with the rest
meta2.cols.star = c("venladose_rand", "final_remit", "response")
meta2.cols.careful = c("id", "first_response_day") #this will fully predict response status
meta2.clean = meta2 %>% select(!all_of(c(meta2.cols.del,meta2.cols.corr)))
ggplot2::ggplot(meta2.clean %>% mutate(response = factor(response)),
ggplot2::aes(x = response, y = days_in_phase2)) +
ggplot2::geom_boxplot()
# table(meta2.clean$Tx, meta2.clean$response)
# ggplot2::ggplot(meta2.clean %>% mutate(response = factor(response)),
#                 ggplot2::aes(x = response, y = madrs_rand)) +
#   ggplot2::geom_boxplot()
# ggplot2::ggplot(meta2.clean %>% mutate(final_remit = factor(final_remit)),
#                 ggplot2::aes(x = final_remit, y = first_response_day)) +
#   ggplot2::geom_point()
ggplot2::ggplot(meta2.clean %>% mutate(final_remit = factor(final_remit),
first_response_day = ifelse(is.na(first_response_day), 100, first_response_day)),
ggplot2::aes(x = madrs_rand, y = first_response_day, color = final_remit)) +
ggplot2::geom_point()
library(psych)
COVARIATES.CORRELATION = CovariateAnalysis::getAssociationStatistics(meta2.clean, PVAL = 0.05)
tmp = COVARIATES.CORRELATION$ESTIMATE
tmp[COVARIATES.CORRELATION$PVAL > 0.05] = 0
h = Heatmap(tmp, col = colorRamp2(c(-1,0,1), c('blue','white','red')), name = 'AssocEstimate')
ComplexHeatmap::draw(h, heatmap_legend_side = 'left')
tmp
dim(tmp)
library(psych)
COVARIATES.CORRELATION = CovariateAnalysis::getAssociationStatistics(meta2.clean %>% select(!all_of(c(id, site))) %>%
mutate(Tx = factor(Tx),
sext = factor(sext),
racet = factor(racet),
deptyp = factor(deptyp), )
, PVAL = 0.05)
library(psych)
COVARIATES.CORRELATION = CovariateAnalysis::getAssociationStatistics(meta2.clean %>% select(!all_of(c("id", "site"))) %>%
mutate(Tx = factor(Tx),
sext = factor(sext),
racet = factor(racet),
deptyp = factor(deptyp), )
, PVAL = 0.05)
tmp = COVARIATES.CORRELATION$ESTIMATE
tmp[COVARIATES.CORRELATION$PVAL > 0.05] = 0
h = Heatmap(tmp, col = colorRamp2(c(-1,0,1), c('blue','white','red')), name = 'AssocEstimate')
ComplexHeatmap::draw(h, heatmap_legend_side = 'left')
ComplexHeatmap::draw(h, heatmap_legend_side = 'left')
12*7
log(147)
log(34)
5/30*30
5/30*10
5/30*12
dat.all.filtered = dat.all[filter.data.all|filter.data.SCN|filter.data.three, ]
dat.SCN = read.csv("data/SCN_count.csv", row.names = 1)
dat.b12 = read.csv("data/B12merged_count.csv", row.names = 1)
dat.b3 = read.csv("data/Batch3_count.csv", row.names = 1)
dat.all = cbind.data.frame(dat.SCN, dat.b12, dat.b3)
meta.all = read.csv("data/meta_clean_complete.csv", row.names = 1) %>% filter(Trt!="?") %>% arrange(Region)
dat.all = dat.all[, meta.all$Sample.ID]
filter.data.all = edgeR::filterByExpr(dat.all, design = model.matrix(~Sex+Trt+Region, data = meta.all))
boxplot(log2(dat.all[filter.data.all, ]+1), col = factor(meta.all$Batch))
dat.SCN = read.csv("data/SCN_count.csv", row.names = 1)
meta.SCN = read.csv("data/meta_clean_complete.csv", row.names = 1) %>% filter(Region == "SCN") %>% filter(Trt!="?")
dat.SCN = dat.SCN[, meta.SCN$Sample.ID]
filter.data.SCN = edgeR::filterByExpr(dat.SCN, design = model.matrix(~Sex+Trt, data = meta.SCN))
dat.b12 = read.csv("data/B12merged_count.csv", row.names = 1)
dat.b3 = read.csv("data/Batch3_count.csv", row.names = 1)
dat.three = cbind.data.frame(dat.b12, dat.b3)
meta.three = meta.SCN = read.csv("data/meta_clean_complete.csv", row.names = 1) %>%
filter(Region != "SCN") %>% filter(Trt!="?")
# all(c(colnames(dat.b12), colnames(dat.b3)) == meta.three$Sample.ID)
dat.three = dat.three[, meta.three$Sample.ID]
filter.data.three = edgeR::filterByExpr(dat.three, design = model.matrix(~Sex+Trt+Region, data = meta.three))
sum((!filter.data.all)&(filter.data.SCN))
boxplot(log2(dat.all[(!filter.data.all)&(filter.data.SCN), ]+1), col = factor(meta.all$Batch), main = "include in SCN filtered but not all")
#
boxplot(log2(dat.all[(filter.data.all)&(!filter.data.SCN), ]+1), col = factor(meta.all$Batch), main = "include in All filtered but not SCN")
#
boxplot(log2(dat.all[(!filter.data.all)&(filter.data.three), ]+1), col = factor(meta.all$Batch), main = "include in three filtered but not all")  #only 5
#
boxplot(log2(dat.all[(filter.data.all)&(!filter.data.three), ]+1), col = factor(meta.all$Batch), main = "include in All filtered but not three")
lostSCNgenes = dat.SCN[(!filter.data.all)&(filter.data.SCN),  ]
lostSCNgenes = limma::voom(lostSCNgenes, design = model.matrix(~Sex*Trt, data = meta.SCN))
dat.all.filtered = dat.all[filter.data.all|filter.data.SCN|filter.data.three, ]
write.csv(dat.all.filtered, "data/AllRegions_count_filtered.csv")
lostSCNgenes = limma::voom(lostSCNgenes, design = model.matrix(~Sex*Trt, data = meta.SCN))
had(meta.SCN)
haed(meta.SCN)
head(meta.SCN)
model.matrix(~Sex*Trt, data = meta.SCN)
lostSCNgenes = dat.SCN[(!filter.data.all)&(filter.data.SCN),  ]
lostSCNgenes[1:5, 1:5]
lostSCNgenes = limma::voom(lostSCNgenes, design = model.matrix(~Sex*Trt, data = meta.SCN))
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(DESeq2)
library(dplyr)
dat = read.csv("data/AllRegions_count_filtered.csv", row.names = 1)
dat[1:5, 1:5]
meta = read.csv("data/meta_clean_complete.csv", row.names = 1)
library(biomaRt)
mart = useMart("Ensembl")
mart = useMart("ensembl")
listDatasets(mart)[1:5, ]
listDatasets(mart) %>% filter(grepl("rat", description))
listDatasets(mart) %>% filter(grepl("Rat", description))
mart = useDataset("rnorvegicus_gene_ensembl", mart)
listAttributes(mart)[1:5, ]
listAttributes(mart) %>% filter(grepl("symbol", description)|grepl("Symbol", description))
listAttributes(mart) %>% filter(grepl("symbol", name))
listFilters(mart)[1:5, ]
listFilters(mart) %>% filter(grepl("ensembl", description))
listFilters(mart) %>% filter(grepl("ensembl", name))
dat = read.csv("data/AllRegions_count_filtered.csv", row.names = 1)
gname.match = getBM(atrributes = c("ensembl_gene_id", "mgi_symbol", "rgd_symbol"),
filters = "ensembl_gene_id",
values = rownames(dat), mart)
?getBM
rownames(dat)
gname.match = getBM(atrributes = c("ensembl_gene_id", "mgi_symbol", "rgd_symbol"),
filters = "ensembl_gene_id",
values = rownames(dat),
mart)
gname.match = getBM(attributes = c("ensembl_gene_id", "mgi_symbol", "rgd_symbol"),
filters = "ensembl_gene_id",
values = rownames(dat),
mart)
head(gname.match)
head(gname.match, n = 20)
dim(gname.match)
dim(dat)
gname.match = data.frame(ensembl_gene_id = rownames(dat)) %>% left_join(gname.match)
head(gname.match)
dim(gname.match)
dup.genes = gname.match$ensembl_gene_id[duplicated(gname.match$ensembl_gene_id)]
dup.genes
gname.match[gname.match$ensembl_gene_id%in%dup.genes, ]
gname.match[gname.match$ensembl_gene_id%in%dup.genes, ]
gname.match0 = gname.match %>%
split(gname.match$ensembl_gene_id) %>%
lapply(function(a.gene.df){
if(nrow(a.gene.df)>1){
data.frame(ensembl_gene_id = a.gene.df$ensembl_gene_id[1],
mgi_symbol = a.gene.df$mgi_symbol[1],
rgd_symbol = paste0(a.gene.df$rgd_symbol, sep = ","))
}else{
a.gene.df
}
})
gname.match0[[1]]
paste(gname.match0[[1]]$rgd_symbol, sep = ",")
paste(gname.match0[[1]]$rgd_symbol, sep = ",", collapse = TRUE)
paste(gname.match0[[1]]$rgd_symbol,  collapse = ",")
gname.match0 = gname.match %>%
split(gname.match$ensembl_gene_id) %>%
lapply(function(a.gene.df){
if(nrow(a.gene.df)>1){
data.frame(ensembl_gene_id = a.gene.df$ensembl_gene_id[1],
mgi_symbol = a.gene.df$mgi_symbol[1],
rgd_symbol = paste(a.gene.df$rgd_symbol, collapse = ","))
}else{
a.gene.df
}
})
gname.match0【【1
gname.match0[[1]]
gname.match0[[2]]
gname.match0[[3]]
gname.match0[[4]]
gname.match0[[5]]
gname.match0[[6]]
gname.match0[[7]]
gname.match0[[8]]
gname.match0[[9]]
gname.match0[[10]]
gname.match = do.call(rbind.data.frame, gname.match0)
head(gname.match, n = 20)
write.csv(gname.match[, c(1, 3)], "data/GeneSymbolMatch.csv")
rm(list = ls())
dat = read.csv("data/AllRegions_count_filtered.csv", row.names = 1)
meta = read.csv("data/meta_clean_complete.csv", row.names = 1)
gene_match = read.csv("data/GeneSymbolMatch.csv", row.names = 1)
head(gene_match)
head(meta)
table(meta$Sex)
table(meta$Trt)
meta = read.csv("data/meta_clean_complete.csv", row.names = 1) %>%
filter(Trt !="?") %>%
mutate(Sex = factor(Sex, levels = c("Female", "Male")),
Trt = factor(Trt, levels = c("Naive", "Intox", "Withdrawal", "Abstinence")))
regions = unique(meta$Region)
i = 1
a.region = regions[i]
a.meta = meta %>% filter(Region == a.region)
a.dat = dat[, a.meta$Sample.ID]
dds = DESeqDataSetFromMatrix(countData = as.matrix(a.dat),
colData = a.meta,
design = ~Trt*Sex)
dim(a.meta)
a.meta
dim(a.dat)
dim(a.meta)
dds = DESeqDataSetFromMatrix(countData = as.matrix(a.dat),
colData = a.meta,
design = ~Trt*Sex)
sum(!is.integer(a.dat))
which(!is.integer(a.dat), arr.ind = TRUE)
a.dat[1:5, 1:5]
which(!is.integer(a.dat))
sum(is.integer(a.dat))
sum(is.integer(as.matrix(a.dat)))
xx = as.matrix(a.dat)
dim(xx)
xx[1:5, 1:5]
is.integer(xx[1, 1])
class(xx[1,1])
as.integer(xx[1, 1])
as.integer(xx[1, 1])-x[1, 1]
as.integer(xx[1, 1])-xx[1, 1]
(as.integer(xx[1, 1])-xx[1, 1])
xx = as.integer(as.matrix(a.dat))
dim(xx)
xx[1:5]
xx = as.integer(a.dat)
dds.Sex2 = DESeqDataSetFromMatrix(countData = round(as.matrix(a.dat[, a.meta.Sex$ID])),
colData = a.meta.Sex,
design= ~ Genotype*Condition)
dds = DESeqDataSetFromMatrix(countData = round(as.matrix(a.dat)),
colData = a.meta,
design = ~Trt*Sex)
all(round(as.matrix(a.dat))==as.matrix(a.dat))
which(round(as.matrix(a.dat))!=as.matrix(a.dat), arr.ind = TRUE)
which(round(as.matrix(a.dat))!=as.matrix(a.dat), arr.ind = TRUE) [1:5, ]
a.dat[6, 1]
a.dat[12, 1]
dds = DESeqDataSetFromMatrix(countData = round(as.matrix(a.dat)),
colData = a.meta,
design = ~Trt*Sex)
dim(round(as.matrix(a.dat)))
resultsNames(dds)
resultsNames(dds)
#should we add RIN?
dds = DESeq(dds)
resultsNames(dds)
results(dds, name = "Trt_Intox_vs_Naive")[1:5, ]
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/yusi/WGCNA_Newman")
library(RCy3)
#open cytoscape from your laptop
cytoscapePing ()
edges = read.csv(paste0("network_blue.csv"))
edges$interaction = "interacts"
colnames(edges)[1:2] = c("source", "target")
nodes = read.csv(paste0("hub_blue.csv"))
colnames(nodes)[1] = "id"
createNetworkFromDataFrames(nodes,edges, title="blue_test", collection="WGCNA")
head(edges)
head*nodes
head(nodes)
createNetworkFromDataFrames(nodes,edges, title="blue_test", collection="WGCNA")
rm(list = ls())
createNetworkFromDataFrames(nodes,edges, title="blue_test", collection="WGCNA")
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/yusi/WGCNA_Newman")
edges = read.csv(paste0("network_blue.csv"))
edges$interaction = "interacts"
colnames(edges)[1:2] = c("source", "target")
nodes = read.csv(paste0("hub_blue.csv"))
colnames(nodes)[1] = "id"
createNetworkFromDataFrames(nodes,edges, title="blue_test", collection="WGCNA")
#open cytoscape from your laptop
cytoscapePing ()
createNetworkFromDataFrames(nodes,edges, title="blue_test", collection="WGCNA")
WGCNA.dir = "/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Diniz/proteomics/BaselineLLDvsHC/WGCNA/modules_SexGroups/power3"
Network.dir = paste0(WGCNA.dir, "/Hub_Gene_Detection")
edges = read.csv(paste0(Network.dir, "/MALE_LLD_network_black_cut0.9.csv"))
edges$interaction = "interacts"
colnames(edges)[1:2] = c("source", "target")
nodes = read.csv(paste0(Network.dir, "/MALE_LLD_hub_black_cut0.9.csv"))
colnames(nodes)[1] = "id"
head(nodes)
head(edges)
createNetworkFromDataFrames(nodes,edges, title="MALE_BLACK_test", collection="Proteomics_baseline_WGCNA")
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/yusi/WGCNA_Newman")
edges = read.csv(paste0("network_blue.csv"))
edges$interaction = "interacts"
colnames(edges)[1:2] = c("source", "target")
nodes = read.csv(paste0("hub_blue.csv"))
colnames(nodes)[1] = "id"
edges
createNetworkFromDataFrames(nodes,edges, title="blue_test", collection="WGCNA")
rm(list = ls())
WGCNA.dir = "/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Diniz/proteomics/BaselineLLDvsHC/WGCNA/modules_SexGroups/power3"
Network.dir = paste0(WGCNA.dir, "/Hub_Gene_Detection")
edges = read.csv(paste0(Network.dir, "/MALE_LLD_network_black_cut0.9.csv"))
edges$interaction = "interacts"
colnames(edges)[1:2] = c("source", "target")
nodes = read.csv(paste0(Network.dir, "/MALE_LLD_hub_black_cut0.9.csv"))
colnames(nodes)[1] = "id"
createNetworkFromDataFrames(nodes,edges, title="MALE_BLACK_test2", collection="Proteomics_baseline_WGCNA")
head(edges)
head(nodes)
all(c(edges$source, edges$target)%in%nodes$id)
all(nodes$id%in%c(edges$source, edges$target))
createNetworkFromDataFrames(nodes[, 1:3],edges, title="blue_test", collection="WGCNA")
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/yusi/WGCNA_Newman")
edges = read.csv(paste0("network_blue.csv"))
edges$interaction = "interacts"
colnames(edges)[1:2] = c("source", "target")
nodes = read.csv(paste0("hub_blue.csv"))
colnames(nodes)[1] = "id"
all(c(edges$source, edges$target)%in%nodes$id)
all(nodes$id%in%c(edges$source, edges$target))
library(shiny)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
hdir = "/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/RShiny/test"
Robj = readRDS(paste0(hdir, "/OneGroup4/save/FormattedData.rds"))
db = readRDS(paste0(hdir, "/OneGroup4/save/db.rds"))
write.csv(Robj$rhythm, paste(db$working.dir, "ParamEst.csv", sep = "/"))
Robj$rhythm
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
