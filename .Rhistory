t.test(alpha1.vec, alpha2.vec, alternative = "less")
mean(alpha1.vec)
mean(alpha2.vec)
t.test(alpha1.vec, alpha2.vec, alternative = "greater")
t.test(alpha1.vec, alpha2.vec, alternative = "less")
t.test(alpha1.vec, alpha2.vec, alternative = "greater")
B = 1000
posterior.list = lapply(1:B, function(b){
set.seed(b)
alpha1 = rbeta(1, y1+a1, x1+b1)
alpha2 = rbeta(1, y2+a2, x2+b2)
return(list(alpha1, alpha2))
})
alpha1.vec = do.call(c, lapply(posterior.list, `[[`, 1))
alpha2.vec = do.call(c, lapply(posterior.list, `[[`, 2))
t.test(alpha1.vec, alpha2.vec, alternative = "greater")
hist(alpha2.vec-alpha1.vec)
mean(alpha2.vec-alpha1.vec>0)
mean((alpha2.vec-alpha1.vec)>0)
hist(alpha2.vec-alpha1.vec)
#data
y1 = 294; y2 = 288; x1 = 307; x2 = 332;
#hyperparameter for priors
a1 = 0.5; b1 = 0.5; a2 = 0.5; b2 = 0.5;
#
B = 1000
posterior.list = lapply(1:B, function(b){
set.seed(b)
alpha1 = rbeta(1, y1+a1, x1+b1)
alpha2 = rbeta(1, y2+a2, x2+b2)
return(list(alpha1, alpha2))
})
alpha1.vec = do.call(c, lapply(posterior.list, `[[`, 1))
alpha2.vec = do.call(c, lapply(posterior.list, `[[`, 2))
t.test(alpha1.vec, alpha2.vec, alternative = "greater")
hist(alpha2.vec-alpha1.vec)
y1+a1
x1+b1
rm(list = ls())
library(dplyr)
# save(x1, x2, DCP_rhythm, DCP_dparam, DCP_dparam2, DCP_dR2, file = paste0("DCP_output.rData"))
load("DCP_output.rData")
DCP_dparam
dim(DCP_dparam)
dim(DCP_dparam2)
sum(DCP_dparam$post.hoc.peak.By.p)
sum(DCP_dparam$post.hoc.A.By.p)
colnames(DCP_dparam)
sum(DCP_dparam$post.hoc.A.By.p)
head(DCP_dparam2)
sum(DCP_dparam2$pvalue<0.05)
load("DCP_output.rData")
DiffCircaPipeline::DCP_ScatterPlot(DCP_rhythm, genes.plot = DCP_dR2 %>% arrange(p.R2) %>%
filter(p.R2<0.05&delta.R2>0) %>% pull(gname),
Info1 = "Control", Info2 = "SCZ",
filename = paste0("scatter_dR2up.pdf"), file.height = 8, file.width = 16)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
load("DCP_output.rData")
DiffCircaPipeline::DCP_ScatterPlot(DCP_rhythm, genes.plot = DCP_dR2 %>% arrange(p.R2) %>%
filter(p.R2<0.05&delta.R2>0) %>% pull(gname),
Info1 = "Control", Info2 = "SCZ",
filename = paste0("Figures/scatter_dR2up.pdf"), file.height = 8, file.width = 16)
DiffCircaPipeline::DCP_ScatterPlot(DCP_rhythm, genes.plot = DCP_dR2 %>% arrange(p.R2) %>%
filter(p.R2<0.05&delta.R2<0) %>% pull(gname),
Info1 = "Control", Info2 = "SCZ",
filename = paste0("Figures/scatter_dR2down.pdf"), file.height = 8, file.width = 16)
DiffCircaPipeline::DCP_PlotPeakDiff(DCP_rhythm, dPhase = DCP_dparam2)
pdf(paste0(hdir, "Figures/TOJRtab.pdf"), width = 5)
pdf(paste0("Figures/TOJRtab.pdf"), width = 5)
a.TOJR = DCP_rhythm$rhythm.joint$TOJR
tab.p = data.frame(cutoff = paste0("p-value < ", 0.05),
RhyI = sum(a.TOJR=="rhyI"),
RhyII = sum(a.TOJR=="rhyII"),
RhyBoth = sum(a.TOJR=="both"),
Arrhy = sum(a.TOJR=="arrhy"))
a.TOJR = DCP_rhythm$rhythm.joint$TOJR.FDR
tab.p = rbind.data.frame(tab.p,
data.frame(cutoff = paste0("q-value < ", 0.05),
RhyI = sum(a.TOJR=="rhyI"),
RhyII = sum(a.TOJR=="rhyII"),
RhyBoth = sum(a.TOJR=="both"),
Arrhy = sum(a.TOJR=="arrhy")))
a.TOJR = DiffCircaPipeline::toTOJR(DCP_rhythm, method = "Sidak_FS", alpha = 0.1, adjustP = FALSE, parallel.ncores = 2)
tab.p = rbind.data.frame(tab.p,
data.frame(cutoff = paste0("p-value < ", 0.1),
RhyI = sum(a.TOJR=="rhyI"),
RhyII = sum(a.TOJR=="rhyII"),
RhyBoth = sum(a.TOJR=="both"),
Arrhy = sum(a.TOJR=="arrhy")))
a.TOJR = DiffCircaPipeline::toTOJR(DCP_rhythm, method = "Sidak_FS", alpha = 0.2, adjustP = TRUE, parallel.ncores = 2)
tab.p = rbind.data.frame(tab.p,
data.frame(cutoff = paste0("q-value < ", 0.2),
RhyI = sum(a.TOJR=="rhyI"),
RhyII = sum(a.TOJR=="rhyII"),
RhyBoth = sum(a.TOJR=="both"),
Arrhy = sum(a.TOJR=="arrhy")))
a.TOJR = DiffCircaPipeline::toTOJR(DCP_rhythm, method = "Sidak_FS", alpha = 0.3, adjustP = TRUE, parallel.ncores = 2)
tab.p = rbind.data.frame(tab.p,
data.frame(cutoff = paste0("q-value < ", 0.3),
RhyI = sum(a.TOJR=="rhyI"),
RhyII = sum(a.TOJR=="rhyII"),
RhyBoth = sum(a.TOJR=="both"),
Arrhy = sum(a.TOJR=="arrhy")))
tab.p2 = tab.p[c(1, 3, 4), ]
colnames(tab.p2)[2] = "RhyI \n(Control)"
colnames(tab.p2)[3] = "RhyII \n(SCZ)"
p<-gridExtra::tableGrob(tab.p2, rows = NULL)
gridExtra::grid.arrange(p)
dev.off()
tab.p2
a.TOJR = DCP_rhythm$rhythm.joint$TOJR
tab.p = data.frame(cutoff = paste0("p-value < ", 0.05),
RhyI = sum(a.TOJR=="rhyI"),
RhyII = sum(a.TOJR=="rhyII"),
RhyBoth = sum(a.TOJR=="both"),
Arrhy = sum(a.TOJR=="arrhy"))
a.TOJR = DCP_rhythm$rhythm.joint$TOJR.FDR
tab.p = rbind.data.frame(tab.p,
data.frame(cutoff = paste0("q-value < ", 0.05),
RhyI = sum(a.TOJR=="rhyI"),
RhyII = sum(a.TOJR=="rhyII"),
RhyBoth = sum(a.TOJR=="both"),
Arrhy = sum(a.TOJR=="arrhy")))
tab.p
a.TOJR = DiffCircaPipeline::toTOJR(DCP_rhythm, method = "Sidak_FS", alpha = 0.1, adjustP = FALSE, parallel.ncores = 2)
tab.p = rbind.data.frame(tab.p,
data.frame(cutoff = paste0("p-value < ", 0.1),
RhyI = sum(a.TOJR=="rhyI"),
RhyII = sum(a.TOJR=="rhyII"),
RhyBoth = sum(a.TOJR=="both"),
Arrhy = sum(a.TOJR=="arrhy")))
tab.p
a.TOJR = DiffCircaPipeline::toTOJR(DCP_rhythm, method = "Sidak_FS", alpha = 0.2, adjustP = TRUE, parallel.ncores = 2)
tab.p = rbind.data.frame(tab.p,
data.frame(cutoff = paste0("q-value < ", 0.2),
RhyI = sum(a.TOJR=="rhyI"),
RhyII = sum(a.TOJR=="rhyII"),
RhyBoth = sum(a.TOJR=="both"),
Arrhy = sum(a.TOJR=="arrhy")))
a.TOJR = DiffCircaPipeline::toTOJR(DCP_rhythm, method = "Sidak_FS", alpha = 0.3, adjustP = TRUE, parallel.ncores = 2)
tab.p = rbind.data.frame(tab.p,
data.frame(cutoff = paste0("q-value < ", 0.3),
RhyI = sum(a.TOJR=="rhyI"),
RhyII = sum(a.TOJR=="rhyII"),
RhyBoth = sum(a.TOJR=="both"),
Arrhy = sum(a.TOJR=="arrhy")))
tab.p
tab.p2 = tab.p[c(1, 3, 4), ]
colnames(tab.p2)[2] = "RhyI \n(Control)"
colnames(tab.p2)[3] = "RhyII \n(SCZ)"
tab.p2
pdf(paste0("Figures/TOJRtab.pdf"), width = 5)
p<-gridExtra::tableGrob(tab.p2, rows = NULL)
gridExtra::grid.arrange(p)
dev.off()
268+252+12+13964
14496*0.05
14496*0.05*0.05
14496*0.025*0.025
14496*0.025
background.genes = x1$gname
length.max = length(background.genes)
fill.vec = function(a.vec, length.max=nrow(res)){
c(a.vec, rep("", length.max-length(a.vec)))
}
background.genes = x1$gname
length.max = length(background.genes)
fill.vec = function(a.vec, length.max=nrow(res)){
c(a.vec, rep("", length.max-length(a.vec)))
}
df = data.frame(RhyI = fill.vec(as.character(DCP_rhythm$rhythm.joint$gname)[DCP_rhythm$rhythm.joint$TOJR %in% c("rhyI", "both")], length.max),
RhyII = fill.vec(as.character(DCP_rhythm$rhythm.joint$gname)[DCP_rhythm$rhythm.joint$TOJR %in% c("rhyII", "both")], length.max),
Background = background.genes)
colnames(df) = c("Control", "SCZ", "_BACKGROUND")
dir.create(paste0("MetaScape_Input"))
write.csv(df, paste0("MetaScape_Input/DCP_TOJR_", "Control", "_", "SCZ", ".csv"), row.names = FALSE)
DCP_dR2 %>% arrange(p.R2) %>%
filter(p.R2<0.05&delta.R2>0) %>% pull(gname)
class(DCP_dR2$gname)
df = data.frame(R2up = fill.vec(DCP_dR2 %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname), length.max),
RhyII = fill.vec(DCP_dR2 %>% filter(p.R2<0.05&delta.R2<0) %>% pull(gname), length.max),
Background = background.genes)
colnames(df) = c("Control", "SCZ", "_BACKGROUND")
write.csv(df, paste0("MetaScape_Input/DCP_dR2_", "Control", "_", "SCZ", ".csv"), row.names = FALSE)
length(DCP_dR2 %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname))
length(DCP_dR2 %>% filter(p.R2<0.05&delta.R2<0) %>% pull(gname))
df = data.frame(R2up = fill.vec(DCP_dR2 %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname), length.max),
R2down = fill.vec(DCP_dR2 %>% filter(p.R2<0.05&delta.R2<0) %>% pull(gname), length.max),
Background = background.genes)
colnames(df) = c("R2up", "R2down", "_BACKGROUND")
write.csv(df, paste0("MetaScape_Input/DCP_dR2_", "Control", "_", "SCZ", ".csv"), row.names = FALSE)
load("DCP_output.rData")
DCP_rhythm = DiffCircaPipeline::DCP_Rhythmicity(x1, x2, alpha = 0.05, alpha.FDR = 0.1)
table(DCP_rhythm$rhythm.joint$TOJR)
table(DCP_rhythm$rhythm.joint$TOJR.FDR)
DCP_dparam = DiffCircaPipeline::DCP_DiffPar(DCP_rhythm, Par = "A&phase")
DCP_dparam2 = DiffCircaPipeline::DCP_DiffPar(DCP_rhythm, Par = "phase")
DCP_dparam3 = DiffCircaPipeline::DCP_DiffPar(DCP_rhythm, Par = "A")
DCP_dR2 = DiffCircaPipeline::DCP_DiffR2(DCP_rhythm)
save(x1, x2, DCP_rhythm, DCP_dparam, DCP_dparam2, DCP_dparam3, DCP_dR2, file = paste0("DCP_output_0.1.rData"))
load("DCP_output.rData")
DCP_rhythm = DiffCircaPipeline::DCP_Rhythmicity(x1, x2, alpha = 0.1, alpha.FDR = 0.1)
table(DCP_rhythm$rhythm.joint$TOJR)
table(DCP_rhythm$rhythm.joint$TOJR.FDR)
DCP_dparam = DiffCircaPipeline::DCP_DiffPar(DCP_rhythm, Par = "A&phase")
DCP_dparam2 = DiffCircaPipeline::DCP_DiffPar(DCP_rhythm, Par = "phase")
DCP_dparam3 = DiffCircaPipeline::DCP_DiffPar(DCP_rhythm, Par = "A")
DCP_dR2 = DiffCircaPipeline::DCP_DiffR2(DCP_rhythm)
save(x1, x2, DCP_rhythm, DCP_dparam, DCP_dparam2, DCP_dparam3, DCP_dR2, file = paste0("DCP_output_0.1.rData"))
dim(DCP_dR2)
sum(DCP_dR2$p.R2<0.05)
background.genes = x1$gname
length.max = length(background.genes)
fill.vec = function(a.vec, length.max=nrow(res)){
c(a.vec, rep("", length.max-length(a.vec)))
}
df = data.frame(RhyI = fill.vec(as.character(DCP_rhythm$rhythm.joint$gname)[DCP_rhythm$rhythm.joint$TOJR %in% c("rhyI", "both")], length.max),
RhyII = fill.vec(as.character(DCP_rhythm$rhythm.joint$gname)[DCP_rhythm$rhythm.joint$TOJR %in% c("rhyII", "both")], length.max),
Background = background.genes)
colnames(df) = c("Control", "SCZ", "_BACKGROUND")
dir.create(paste0("MetaScape_Input"))
write.csv(df, paste0("MetaScape_Input/DCP_0.1_TOJR_", "Control", "_", "SCZ", ".csv"), row.names = FALSE)
#R2 change genes
df = data.frame(R2up = fill.vec(DCP_dR2 %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname), length.max),
R2down = fill.vec(DCP_dR2 %>% filter(p.R2<0.05&delta.R2<0) %>% pull(gname), length.max),
Background = background.genes)
colnames(df) = c("R2up", "R2down", "_BACKGROUND")
write.csv(df, paste0("MetaScape_Input/DCP_0.1_dR2_", "Control", "_", "SCZ", ".csv"), row.names = FALSE)
DCP_dR2 %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname)
table(DCP_rhythm$rhythm.joint$TOJR)
head(DCP_rhythm$x1$rhythm)
hist(DCP_rhythm$x1$rhythm$A)
set.seed(32608)
n <- 50
tt1 <- runif(n,0,24)
Amp1 <- 0.2
Phase1 <- 6
Offset1 <- 3
yy1 <- Amp1 * sin(2*pi/24 * (tt1 + Phase1)) + Offset1 + rnorm(n,0,1)
tt2 <- runif(n,0,24)
Amp2 <- 0.2
Phase2 <- 5
Offset2 <- 2
yy2 <- Amp2 * sin(2*pi/24 * (tt2 + Phase2)) + Offset2 + rnorm(n,0,1)
LR_deltaR2(tt1, yy1, tt2, yy2)
differentialR2::LR_deltaR2(tt1, yy1, tt2, yy2)
set.seed(32608)
n <- 50
tt1 <- runif(n,0,24)
Amp1 <- 0.2
Phase1 <- 6
Offset1 <- 3
yy1 <- Amp1 * sin(2*pi/24 * (tt1 + Phase1)) + Offset1 + rnorm(n,0,1)
tt2 <- runif(n,0,24)
Amp2 <- 0.2
Phase2 <- 5
Offset2 <- 2
yy2 <- Amp2 * sin(2*pi/24 * (tt2 + Phase2)) + Offset2 + rnorm(n,0,1)
differentialR2::LR_deltaR2(tt1, yy1, tt2, yy2)
pval.vec = c()
pval.vec
set.seed(32608)
pval.vec = c()
for(i in 1:1000){
n <- 50
tt1 <- runif(n,0,24)
Amp1 <- 0.2
Phase1 <- 6
Offset1 <- 3
yy1 <- Amp1 * sin(2*pi/24 * (tt1 + Phase1)) + Offset1 + rnorm(n,0,1)
tt2 <- runif(n,0,24)
Amp2 <- 0.2
Phase2 <- 5
Offset2 <- 2
yy2 <- Amp2 * sin(2*pi/24 * (tt2 + Phase2)) + Offset2 + rnorm(n,0,1)
pval.vec[i] = differentialR2::LR_deltaR2(tt1, yy1, tt2, yy2)
}
mean(pval.vec<0.05)
getpval = function(a, B){
pvals = parallel::mclapply(1:B, function(b){
n <- 50
tt1 <- runif(n,0,24)
Amp1 <- a
Phase1 <- 6
Offset1 <- 3
yy1 <- Amp1 * sin(2*pi/24 * (tt1 + Phase1)) + Offset1 + rnorm(n,0,1)
tt2 <- runif(n,0,24)
Amp2 <- a
Phase2 <- 5
Offset2 <- 2
yy2 <- Amp2 * sin(2*pi/24 * (tt2 + Phase2)) + Offset2 + rnorm(n,0,1)
differentialR2::LR_deltaR2(tt1, yy1, tt2, yy2)
}, mc.cores = 2)
}
pval.vec = c()
a.vec = seq(0.1, 1, by = 0.1)
for(i in 1:length(a.vec)){
a.a = a.vec[i]
pval.vec[i] = mean(getpval(a.a, B)<0.05)
}
B = 1000
pval.vec = c()
a.vec = seq(0.1, 1, by = 0.1)
for(i in 1:length(a.vec)){
a.a = a.vec[i]
pval.vec[i] = mean(getpval(a.a, B)<0.05)
}
plot(a.vec, pval.vec)
pval.vec = c()
a.vec = seq(0.1, 1, by = 0.1)
for(i in 1:length(a.vec)){
a.a = a.vec[i]
pval.vec[i] = mean(getpval(a.a, B)<0.01)
}
plot(a.vec, pval.vec)
pval.vec
head(DCP_rhythm$x1$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR=="both"))
table(DCP_rhythm$rhythm.joint$TOJR)
DCP_rhythm$x1$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR=="both") %>% pull(A) %>% hist
DCP_rhythm$x1$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR=="rhyI") %>% pull(A) %>% hist
DCP_rhythm$x1$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR=="rhyI") %>% mutate(SNR = A/sigma) %>% pull(SNR) %>% hist
DCP_rhythm$x1$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR %in% c("rhyI", "both")) %>% mutate(SNR = A/sigma) %>% pull(SNR) %>% hist
DCP_rhythm$x2$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR %in% c("rhyII", "both")) %>% mutate(SNR = A/sigma) %>% pull(SNR) %>% hist
DCP_rhythm$x1$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR %in% c("rhyI", "both")) %>% pull(sigma) %>% hist()
DCP_rhythm$x2$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR %in% c("rhyII", "both")) %>% pull(sigma) %>% hist()
DCP_rhythm$x1$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR %in% c("rhyI", "both")) %>% pull(sigma) %>% hist(break = seq(0.2, 1.6, 0.2))
DCP_rhythm$x1$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR %in% c("rhyI", "both")) %>% pull(sigma) %>% hist(breaks = seq(0.2, 1.6, 0.2))
DCP_rhythm$x1$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR %in% c("rhyI", "both")) %>% pull(sigma) %>% hist(breaks = seq(0.2, 2, 0.2))
DCP_rhythm$x1$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR %in% c("rhyI", "both")) %>% pull(sigma) %>% hist(breaks = seq(0, 2, 0.2))
DCP_rhythm$x2$rhythm %>% filter(DCP_rhythm$rhythm.joint$TOJR %in% c("rhyII", "both")) %>% pull(sigma) %>%  hist(breaks = seq(0, 2, 0.2))
DCP_dparam3
DCP_dparam3 = DiffCircaPipeline::DCP_DiffPar(DCP_rhythm, Par = "M")
sum(DCP_dparam3$pvalue<0.05)
?DiffCircaPipeline::DCP_DiffR2
readxl::read_xlsx("/Users/xiangningxue/Downloads/41467_2019_11335_MOESM6_ESM.xlsx")
CMres = readxl::read_xlsx("/Users/xiangningxue/Downloads/41467_2019_11335_MOESM6_ESM.xlsx")
dim(CMres)
sum(CMres$MatchedControl_pvalue<0.05)
all(CMres$genes%in%DCP_rhythm$gname_overlap)
mean(CMres$genes%in%DCP_rhythm$gname_overlap)
goverlap = intersect(CMres$genes, DCP_rhythm$gname_overlap)
CMres = CMres[match(goverlap, CMres$genes),]
x1.res = DCP_rhythm$x1$rhythm[match(goverlap, DCP_rhythm$x1$rhythm$gname), ]
plot(-log10(CMres$MatchedControl_pvalue), -log10(x1.res$pvalue))
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres$MatchedControl_pvalue), -log10(x1.res$pvalue))
abline(a = 0, b = 1, col = "red")
x2.res = DCP_rhythm$x2$rhythm[match(goverlap, DCP_rhythm$x2$rhythm$gname), ]
plot(-log10(CMres$SCZ_pvalue), -log10(x2.res$pvalue))
abline(a = 0, b = 1, col = "red")
hist(x1.res$pvalue)
hist(x2.res$pvalue)
hist(x1.res$pvalue)
11083+1487+1638+546
11083/14754
1487/14754
design.vars = data.frame(inphase = cos(2 * pi * x1$time / 24),
outphase = sin(2 * pi * x1$time / 24))
design = stats::model.matrix(~inphase+outphase, data = design.vars)
fit = limma::lmFit(as.numeric(x1$data[1, ]), design)
fit = limma::eBayes(fit, trend = TRUE, robust = TRUE)
git
fit
fit = limma::lmFit(as.numeric(x1$data), design)
fit = limma::lmFit(x1$data, design)
fit = limma::eBayes(fit, trend = TRUE, robust = TRUE)
head(fit)
fit2 = limma::lmFit(x1$data, design, trend = TRUE, robust = TRUE)
fit2 = limma::eBayes(fit2, trend = TRUE, robust = TRUE)
head(fit2)
head(fit1)
head(fit$p.value)
head(fit2$p.value)
head(fit$F.p.value)
head(fit2$F.p.value)
top = limma::topTable(fit, c(2, 3))
top2 = limma::topTable(fit2, c(2, 3))
head(top)
head(top2)
head(DCP_rhythm$x1$rhythm)
DCP_rhythm$x1$rhythm["ENSG00000159208", ]
DCP_rhythm$x1$rhythm["ENSG00000125510", ]
load("DCP_output.rData")
(DCP_dR2 %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname))
background.genes %in% (DCP_dR2 %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname))
write.csv(df, paste0("IPA_Input/dR2.cdv"), row.names = FALSE)
write.csv(df, paste0("IPA_Input/dR2.csv"), row.names = FALSE)
df = data.frame(ID = background.genes,
R2up = as.numeric(background.genes %in% (DCP_dR2 %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname))),
R2down = as.numeric(background.genes %in% (DCP_dR2 %>% filter(p.R2<0.05&delta.R2<0) %>% pull(gname)))
)
write.csv(df, paste0("IPA_Input/dR2.csv"), row.names = FALSE)
sum(df$R2up)
sum(df$R2down)
df = data.frame(ID = background.genes,
R2up = as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname))),
R2down = as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.05&delta.R2<0) %>% pull(gname)))
)
load("DCP_output.rData")
df = data.frame(ID = background.genes,
R2up = as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname))),
R2down = as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.05&delta.R2<0) %>% pull(gname)))
)
write.csv(df, paste0("IPA_Input/dR2_perm.csv"), row.names = FALSE)
CMres2 = readxl::read_xlsx("/Users/xiangningxue/Downloads/41467_2019_11335_MOESM8_ESM.xlsx")
CMres2 %>% head
dim(CMres2)
View(CMres2)
sum(CMres2$R2losePvalue<0.025)
sum(CMres2$R2gainPvalue<0.025)
dim(CMres2)
load("DCP_output_0.1.rData")
table(DCP_rhythm$rhythm.joint$TOJR)
sum(DCP_dR2_perm$p.R2<0.05)
dim(DCP_dR2_perm)
673+670+46
goverlap = intersect(CMres2$genes, DCP_rhythm$gname_overlap)
goverlap = intersect(CMres2$genes, DCP_dR2_perm$gname)
CMres2 = CMres2[match(goverlap, CMres2$genes), ]
DCPres = DCP_dR2[match(goverlap, DCP_dR2$gname), ]
plot(-log10(CMres2$R2losePvalue), -log10(DCPres$p.R2))
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres2$R2losePvalue), -log10(DCPres$p.R2)/2)
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres2$R2losePvalue), -log10(DCPres$p.R2/2))
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres2$R2losePvalue), -log10(DCPres$p.R2))
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres2$R2losePvalue), -log10(DCPres$p.R2/2))
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres2$R2gainPvalue), -log10(DCPres$p.R2/2))
abline(a = 0, b = 1, col = "red")
DCPpermres = DCP_dR2_perm[match(goverlap, DCP_dR2_perm$gname), ]
plot(-log10(CMres2$R2losePvalue), -log10(DCPpermres$p.R2/2))
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres2$R2gainPvalue), -log10(DCPpermres$p.R2/2))
abline(a = 0, b = 1, col = "red")
all(DCP_dR2_perm %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname) %in% CMres2$genes)
all((DCP_dR2_perm %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname) )%in% CMres2$genes)
all((DCP_dR2_perm %>% filter(p.R2<0.05) %>% pull(gname) )%in% CMres2$genes)
(DCP_dR2_perm %>% filter(p.R2<0.05) %>% pull(gname))[!(DCP_dR2_perm %>% filter(p.R2<0.05) %>% pull(gname))%in%CMres2$genes]
View(CMres)
dim(x1$data)
dim(CMres)
plot(-log10(CMres$MatchedControl_pvalue), -log10(x1.res$pvalue))
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres$SCZ_pvalue), -log10(x2.res$pvalue))
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres$MatchedControl_pvalue), -log10(x1.res$pvalue))
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres$SCZ_pvalue), -log10(x2.res$pvalue))
abline(a = 0, b = 1, col = "red")
par(mfrow = c(1, 2))
plot(-log10(CMres$MatchedControl_pvalue), -log10(x1.res$pvalue))
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres$SCZ_pvalue), -log10(x2.res$pvalue))
abline(a = 0, b = 1, col = "red")
, mpar(mfrow = c(1, 2))
plot(-log10(CMres$MatchedControl_pvalue), -log10(x1.res$pvalue), main = "Control", xlab = "NatureComm", ylab = "DiffCircaPipeline")
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres$SCZ_pvalue), -log10(x2.res$pvalue), main = "SCZ", xlab = "NatureComm", ylab = "DiffCircaPipeline")
abline(a = 0, b = 1, col = "red")
par(mfrow = c(1, 2))
plot(-log10(CMres$MatchedControl_pvalue), -log10(x1.res$pvalue), main = "Control", xlab = "NatureComm", ylab = "DiffCircaPipeline")
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres$SCZ_pvalue), -log10(x2.res$pvalue), main = "SCZ", xlab = "NatureComm", ylab = "DiffCircaPipeline")
abline(a = 0, b = 1, col = "red")
par(mfrow = c(1, 2))
plot(-log10(CMres2$R2losePvalue), -log10(DCPpermres$p.R2/2), main = "Control", xlab = "NatureComm", ylab = "DiffCircaPipeline")
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres2$R2gainPvalue), -log10(DCPpermres$p.R2/2), main = "SCZ", xlab = "NatureComm", ylab = "DiffCircaPipeline")
abline(a = 0, b = 1, col = "red")
load("DCP_output_0.1.rData")
goverlap = intersect(CMres2$genes, DCP_dR2_perm$gname)
CMres2 = CMres2[match(goverlap, CMres2$genes), ]
DCPres = DCP_dR2[match(goverlap, DCP_dR2$gname), ]
DCPpermres = DCP_dR2_perm[match(goverlap, DCP_dR2_perm$gname), ]
par(mfrow = c(1, 2))
plot(-log10(CMres2$R2losePvalue), -log10(DCPpermres$p.R2/2), main = "Control", xlab = "NatureComm", ylab = "DiffCircaPipeline")
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres2$R2gainPvalue), -log10(DCPpermres$p.R2/2), main = "SCZ", xlab = "NatureComm", ylab = "DiffCircaPipeline")
abline(a = 0, b = 1, col = "red")
par(mfrow = c(1, 2))
plot(-log10(CMres2$R2losePvalue), -log10(DCPpermres$p.R2/2), main = "Control", xlab = "NatureComm", ylab = "DiffCircaPipeline/2 (-log(p/2))")
abline(a = 0, b = 1, col = "red")
plot(-log10(CMres2$R2gainPvalue), -log10(DCPpermres$p.R2/2), main = "SCZ", xlab = "NatureComm", ylab = "DiffCircaPipeline (-log(p/2))")
abline(a = 0, b = 1, col = "red")
sum(DCP_dR2$p.R2<0)
sum(DCP_dR2_perm$p.R2<0)
head(DCP_dR2_perm)
sum(DCP_dR2_perm$p.R2<0.05)
dim(DCP_dR2_perm)
sum(DCP_dR2_perm$p.R2<0.05&DCP_dR2_perm$delta.R2<0)
sum(DCP_dR2_perm$p.R2<0.05&DCP_dR2_perm$delta.R2>0)
CMres2 = readxl::read_xlsx("/Users/xiangningxue/Downloads/41467_2019_11335_MOESM8_ESM.xlsx")
dim(CMres2)
708+707-31
sum(CMres2$R2losePvalue<0.05)
sum(CMres2$R2gainPvalue<0.05)
sum(CMres2$R2gainPvalue*2<0.05)
sum(CMres2$R2losePvalue*2<0.05)
df = data.frame(ID = background.genes,
R2up = as.numeric(background.genes %in% (DCP_dR2 %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname))),
R2down = as.numeric(background.genes %in% (DCP_dR2 %>% filter(p.R2<0.05&delta.R2<0) %>% pull(gname)))
)
write.csv(df, paste0("IPA_Input/TOJR0.1_dR2.csv"), row.names = FALSE)
df = data.frame(ID = background.genes,
R2up = as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname))),
R2down = as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.05&delta.R2<0) %>% pull(gname)))
)
write.csv(df, paste0("IPA_Input/TOJR0.1_dR2_perm.csv"), row.names = FALSE)
