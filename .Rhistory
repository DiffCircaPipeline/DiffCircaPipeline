33333333333333
33333333333333333333333333333333333333333333333333333
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
?pdf
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
library(shiny)
library(DT)
ui <- fluidPage(
selectizeInput(
"foo",
label = "inputs",
choices = "",
multiple = T,
options = list(
delimiter = " ",
create = T
)
),
textOutput("results"),
hr(),
"textInput",
textInput("pasted1", "paste text here"),
h5("Raw hex code points (20 is space, 0a is linefeed"),
textOutput("verb1"),
h5("Vector of results from splitting on '\\n'"),
textOutput("split1"),
hr(),
"textAreaInput",
textAreaInput("pasted2", "paste text here"),
h5("Raw hex code points (20 is space, 0a is linefeed"),
textOutput("verb2"),
h5("Vector of results from splitting on '\\n'"),
textOutput("split2"),
dataTableOutput("table1")
)
server <- function(input, output, session) {
output$results <- renderText(
paste(paste("item", input$foo))
)
output$verb1 <- renderPrint(charToRaw(input$pasted1))
output$split1 <- renderText(
paste(strsplit(input$pasted1, "\n"))
)
output$verb2 <- renderPrint(charToRaw(input$pasted2))
output$split2 <- renderText(
paste(strsplit(input$pasted2, "\n"))
)
df <- reactive({
df <- as.data.frame(paste(strsplit(input$pasted2, "\n")))
})
output$table1 <- renderDataTable({
df()
}, filter="top", class = 'hover cell-border stripe', editable= TRUE,extensions= 'Buttons',
options = list(dom = 'Bfrtip',pageLength =10,
buttons = c('copy','csv','excel','pdf','print'), scrollX=TRUE),server=FALSE)
}
shinyApp(ui, server)
?selectizeInput
ui <- fluidPage(
selectizeInput(
"foo",
label = "inputs",
choices = "",
multiple = T,
options = list(
delimiter = " ",
create = T
)
),
textOutput("results"),
hr(),
"textInput",
textInput("pasted1", "paste text here"),
h5("Raw hex code points (20 is space, 0a is linefeed"),
textOutput("verb1"),
h5("Vector of results from splitting on '\\n'"),
textOutput("split1"),
hr(),
"textAreaInput",
textAreaInput("pasted2", "paste text here"),
h5("Raw hex code points (20 is space, 0a is linefeed"),
textOutput("verb2"),
h5("Vector of results from splitting on '\\n'"),
textOutput("split2"),
dataTableOutput("table1")
)
server <- function(input, output, session) {
output$results <- renderText(
paste(paste("item", input$foo))
)
output$verb1 <- renderPrint(charToRaw(input$pasted1))
output$split1 <- renderText(
paste(strsplit(input$pasted1, "\n"))
)
output$verb2 <- renderPrint(charToRaw(input$pasted2))
output$split2 <- renderText(
paste(strsplit(input$pasted2, "\n"))
)
df <- reactive({
df <- as.data.frame(paste(strsplit(input$pasted2, "\n")))
})
output$table1 <- renderDataTable({
df()
}, filter="top", class = 'hover cell-border stripe', editable= TRUE,extensions= 'Buttons',
options = list(dom = 'Bfrtip',pageLength =10,
buttons = c('copy','csv','excel','pdf','print'), scrollX=TRUE),server=FALSE)
}
shinyApp(ui, server)
?textAreaInput
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
load("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/SCZvsControl/DCP_output.rData")
CP.obj <- DiffCircaPipeline::DCP_Rhythmicity(x1 = x1, x2 = x2,period = 12)
dR2.LR <- DiffCircaPipeline::DCP_DiffR2(CP.obj, method = "LR")
head(dR2.LR)
a.plot = DiffCircaPipeline::DCP_ScatterPlot(CP.obj, "DPM1")
a.plot
DiffCircaPipeline::DCP_PlotDisplay(a.plot)
length(a.plot)
a.plot2 = DiffCircaPipeline::DCP_ScatterPlot(CP.obj, c("CD99", "DPM1"))
length(a.plot2)
length(a.plot2[[1]])
length(a.plot[[1]])
1:2
a.plot1 = DiffCircaPipeline::DCP_ScatterPlot(CP.obj$x1, "DPM1")
length(a.plot1)
a.plot1 = DiffCircaPipeline::DCP_ScatterPlot(CP.obj$x1, c("CD99", "DPM1"))
a.plot1
class(a.plot1)
DCP_PlotDisplay = function(x = DCP_ScatterPlot(x, genes.plot = NULL,
Info1 = "gI", Info2 = "gII",
filename = NULL, height = 8, width = 8), id = 1:2){
if(length(x)==1){
return(x)
}else{
return(lapply(id, function(a.g){
gridExtra::grid.arrange(x[[1]][[a.g]], x[[2]][[a.g]], ncol = 2)
}))
}
}
DCP_PlotDisplay(a.plot)
DCP_PlotDisplay = function(x = DCP_ScatterPlot(x, genes.plot = NULL,
Info1 = "gI", Info2 = "gII",
filename = NULL, height = 8, width = 8)){
if(length(x)==1){
return(x)
}else{
return(lapply(1:length(x), function(a.g){
gridExtra::grid.arrange(x[[1]][[a.g]], x[[2]][[a.g]], ncol = 2)
}))
}
}
DCP_PlotDisplay(a.plot)
DCP_PlotDisplay = function(x = DCP_ScatterPlot(x, genes.plot = NULL,
Info1 = "gI", Info2 = "gII",
filename = NULL, height = 8, width = 8)){
if(length(x)==1){
return(x)
}else{
return(lapply(1:length(x[[1]]), function(a.g){
gridExtra::grid.arrange(x[[1]][[a.g]], x[[2]][[a.g]], ncol = 2)
}))
}
}
DCP_PlotDisplay(a.plot)
DCP_PlotDisplay(a.plot2)
devtools::install_github("DiffCircaPipeline/Rpackage")
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
DiffCircaPipeline::DCP_PlotDisplay(a.plot$p)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
Robj = readRDS(paste0(hdir, "/TwoGroups2/save/FormattedData.rds"))
hdir = "/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/RShiny/test"
Robj = readRDS(paste0(hdir, "/TwoGroups2/save/FormattedData.rds"))
a.plot = DiffCircaPipeline::DCP_ScatterPlot(CP.obj, "gene 1")
a.plot = DiffCircaPipeline::DCP_ScatterPlot(Robj, "gene 1")
a.plot1 = DiffCircaPipeline::DCP_ScatterPlot(Robj$x1, c("gene 1", "gene 2"))
a.plot = DiffCircaPipeline::DCP_ScatterPlot(Robj, "gene 1")
a.plot1 = DiffCircaPipeline::DCP_ScatterPlot(Robj$x1, c("gene 1", "gene 2"))
a.plot1 = DiffCircaPipeline::DCP_ScatterPlot(Robj$x1, c("gene 1", "gene 2"))
a.plot2 = DiffCircaPipeline::DCP_ScatterPlot(Robj, c("gene 1", "gene 2"))
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/") #XXN
rm(list=ls())
shiny::runApp('RShiny', port=9987, launch.browser=T)
20*0.8/5.5
43.6/14
26/36
36.58/12.5/12
17.32/72
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
load("DCP_output_0.1.rData")
library(dplyr)
rm(list = ls())
load("DCP_output.rData")
df = data.frame(ID = background.genes,
R2up = as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.1&delta.R2>0) %>% pull(gname))),
R2down = as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.1&delta.R2<0) %>% pull(gname)))
)
background.genes = x1$gname
df = data.frame(ID = background.genes,
R2up = as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.1&delta.R2>0) %>% pull(gname))),
R2down = as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.1&delta.R2<0) %>% pull(gname)))
)
write.csv(df, paste0("IPA_Input/TOJR0.1_dR2_perm0.1.csv"), row.names = FALSE)
sum(as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.1&delta.R2>0) %>% pull(gname))))
sum(as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.1&delta.R2<0) %>% pull(gname)))
)
#Mitochondrial dysfunction
DiffCircaPipeline::DCP_ScatterPlot(DCP_rhythm, genes.plot = "CAT",
Info1 = "Control", Info2 = "SCZ")
mito.genes = "ATP5F1A,ATP5MC1,ATP5MC2,ATP5MG,ATPAF1,COX6A1,COX7A1,COX8A,HTRA2,NDUFB11,NDUFB2,NDUFS2,NDUFS3,NDUFS5,NDUFS8,NDUFV1,PARK7,PRDX5,PSEN2,UQCRC1,UQCRFS1"
mito.genes = unlist(strsplit(mito.genes, ","))
mito.genes
head(DCP_rhythm$rhythm.joint)
DCP_rhythm$rhythm.joint %>% filter(gname %in% mito.genes)
all(mito.genes %in% DCP_rhythm$rhythm.joint$gname)
DCP_dR2_perm %>% filter(gname %in% mito.genes)
DCP_dR2_perm %>% filter(gname %in% mito.genes)
DCP_dR2 %>% filter(gname %in% mito.genes)
DiffCircaPipeline::DCP_ScatterPlot(DCP_rhythm, genes.plot = mito.genes,
Info1 = "Control", Info2 = "SCZ",
filename = "Pathway_MitochondroalDysfunction_DCPplot.pdf", width = 14)
?DiffCircaPipeline::DCP_ScatterPlot
DiffCircaPipeline::DCP_ScatterPlot(DCP_rhythm, genes.plot = mito.genes,
Info1 = "Control", Info2 = "SCZ",
filename = "Pathway_MitochondroalDysfunction_DCPplot.pdf", file.width = 14)
plot(DCP_dR2$R2.1, DCP_dR2$R2.2, color = DCP_dR2$p.R2<0.1)
plot(DCP_dR2$R2.1, DCP_dR2$R2.2, color = factor(DCP_dR2$p.R2<0.1))
warnings
warnings()
plot(DCP_dR2$R2.1, DCP_dR2$R2.2, col = factor(DCP_dR2$p.R2<0.1))
plot(DCP_dR2$R2.2-DCP_dR2$R2.1, col = factor(DCP_dR2$p.R2<0.1))
plot(DCP_dR2$R2.2-DCP_dR2$R2.1, -log10(DCP_dR2$p.R2), col = factor(DCP_dR2$p.R2<0.1))
plot(DCP_dR2$R2.2-DCP_dR2$R2.1, -log10(DCP_dR2$p.R2), col = factor(DCP_dR2$p.R2<0.2))
DCP_dR2_perm %>% filter(gname %in% mito.genes)
mito.genes
DCP_rhythm$rhythm.joint %>% filter(gname %in% mito.genes)
load("DCP_output_0.1.rData")
DCP_rhythm$rhythm.joint %>% filter(gname %in% mito.genes)
DCP_dR2_perm %>% filter(gname %in% mito.genes)
plot(DCP_dR2$R2.2-DCP_dR2$R2.1, -log10(DCP_dR2$p.R2), col = factor(DCP_dR2$p.R2<0.2))
background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.1&delta.R2>0) %>% pull(gname))
sum( as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.1&delta.R2>0) %>% pull(gname))))
sum(as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.1&delta.R2<0) %>% pull(gname))))
sum(as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.05&delta.R2>0) %>% pull(gname))))
sum(as.numeric(background.genes %in% (DCP_dR2_perm %>% filter(p.R2<0.05&delta.R2<0) %>% pull(gname))))
sum(DCP_dR2_perm$p.R2<0.1)
DCP_rhythm$rhythm.joint %>% filter(gname %in% mito.genes)
DCP_rhythm$rhythm.joint[match(mito.genes, DCP_rhythm$rhythm.joint$gname),]
DCP_dR2_perm[match(mito.genes, DCP_dR2_perm$gname),]
devtools::install_github("DiffCircaPipeline/Rpackage")
library(devtools)
library(roxygen2)
use_gpl_license()
use_r("DCP_sim_data")
document()
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
check()
load_all()
check()
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
check()
devtools::install_github("DiffCircaPipeline/Rpackage")
hdir = "/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline"
CP.obj = readRDS(paste0(hdir, "/", "RShiny/test/", "TwoGroups2", "/save/", "FormattedData.rds"))
head(CP.obj$x1$rhythm)
#/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/RShiny/test/TwoGroups2
CP.obj1 = readRDS(paste0(hdir, "/", "RShiny/test/", "OneGroup7", "/save/", "FormattedData.rds"))
#/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/RShiny/test/TwoGroups2
CP.obj1 = readRDS(paste0(hdir, "/", "RShiny/test/", "OneGroup6", "/save/", "FormattedData.rds"))
head(CP.obj1$rhythm)
CP.obj2 = readRDS(paste0(hdir, "/", "RShiny/test/", "SCZvsControl2", "/save/", "FormattedData.rds"))
head(CP.obj2$x1$rhythm)
hsit(CP.obj2$x1$rhythm$A)
hist(CP.obj2$x1$rhythm$A)
CP.obj2$x1$rhythm$qvalue2[CP.obj2$x1$rhythm$A>0.15] = p.adjust(CP.obj2$x1$rhythm$pvalue[CP.obj2$x1$rhythm$A>0.15], "BH")
plot(-log10(CP.obj2$x1$rhythm$qvalue), -log10(CP.obj2$x1$rhythm$qvalue2))
abline(a = 0, b = 1, col = "red")
plot(-log10(CP.obj2$x1$rhythm$qvalue), -log10(CP.obj2$x1$rhythm$qvalue2))
abline(a = 0, b = 1, col = "red")
plot(-log10(CP.obj2$x1$rhythm$qvalue[CP.obj2$x1$rhythm$A>0.15]), -log10(CP.obj2$x1$rhythm$qvalue2[CP.obj2$x1$rhythm$A>0.15]))
abline(a = 0, b = 1, col = "red")
sum(CP.obj2$x1$rhythm$A>0.15)
-log10(CP.obj2$x1$rhythm$qvalue[CP.obj2$x1$rhythm$A>0.15])
-log10((1))
plot(-log10(CP.obj2$x1$rhythm$qvalue[CP.obj2$x1$rhythm$A<=0.15]), -log10(CP.obj2$x1$rhythm$qvalue2[CP.obj2$x1$rhythm$A<=0.15]))
abline(a = 0, b = 1, col = "red")
-log10(CP.obj2$x1$rhythm$qvalue[CP.obj2$x1$rhythm$A<=0.15])
-log10(CP.obj2$x1$rhythm$qvalue2[CP.obj2$x1$rhythm$A<=0.15])
CP.obj2$x1$rhythm$qvalue2[CP.obj2$x1$rhythm$A<=0.15]
CP.obj2$x1$rhythm$qvalue2
CP.obj2$x1$rhythm$qvalue2 = 1
CP.obj2$x1$rhythm$qvalue2[CP.obj2$x1$rhythm$A>0.15] = p.adjust(CP.obj2$x1$rhythm$pvalue[CP.obj2$x1$rhythm$A>0.15], "BH")
plot(-log10(CP.obj2$x1$rhythm$qvalue[CP.obj2$x1$rhythm$A>0.15]), -log10(CP.obj2$x1$rhythm$qvalue2[CP.obj2$x1$rhythm$A>0.15]))
abline(a = 0, b = 1, col = "red")
plot(-log10(CP.obj2$x1$rhythm$qvalue[CP.obj2$x1$rhythm$A<=0.15]), -log10(CP.obj2$x1$rhythm$qvalue2[CP.obj2$x1$rhythm$A<=0.15]))
abline(a = 0, b = 1, col = "red")
-log10(CP.obj2$x1$rhythm$qvalue[CP.obj2$x1$rhythm$A<=0.15])
plot(-log10(CP.obj2$x1$rhythm$qvalue[CP.obj2$x1$rhythm$A>0.15]), -log10(CP.obj2$x1$rhythm$qvalue2[CP.obj2$x1$rhythm$A>0.15]))
abline(a = 0, b = 1, col = "red")
head(CP.obj$rhythm.joint)
head(CP.obj$x1$rhythm)
10^(-1)
10^(-0.5)
amp.cut = function(amp, a.TOJR){
#amp is a vector indicating if the amplitudes is greater than the cutoff
if(a.TOJR == "arrhy"){
return("arrhy")
}else if(a.TOJR == "rhyI"){
if(amp[1]){
return("rhyI")
}else{
return("arrhy")
}
}else if(a.TOJR == "rhyII"){
if(amp[2]){
return("rhyII")
}else{
return("arrhy")
}
}else if(a.TOJR == "both"){
if(amp[1]&amp[2]){
return("both")
}else if(amp[1]){
return("rhyI")
}else if(amp[2]){
return("rhyII")
}else{
return("arrhy")
}
}
}
source("~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/DiffCircaPipeline/R/DCP_Rhythmicity.R", echo=TRUE)
CP.obj.new = DCP_Rhythmicity(x1 = CP.obj2$x1, x2 = CP.obj2$x2, amp.cutoff = 0.15)
TOJR.old = CP.obj$rhythm.joint
TOJR.new = CP.obj.new$rhythm.joint
table(TOJR.old$TOJR)
table(TOJR.new$TOJR)
TOJR.old = CP.obj2$rhythm.joint
table(TOJR.old$TOJR)
table(TOJR.new$TOJR)
CP.obj.new = DCP_Rhythmicity(x1 = CP.obj2$x1, x2 = CP.obj2$x2, amp.cutoff = 0.25)
TOJR.new = CP.obj.new$rhythm.joint
table(TOJR.new$TOJR)
table(TOJR.old$TOJR)
CP.obj.new$x1$rhythm[match(TOJR.new$gname[TOJR.new$TOJR!="arrhy"]), "A"]
CP.obj.new$x1$rhythm[match(TOJR.new$gname[TOJR.new$TOJR!="arrhy"]), "A"]
CP.obj.new$x1$rhythm[match(TOJR.new$gname[TOJR.new$TOJR!="arrhy"], CP.obj.new$x1$rhythm$gname), "A"]
table(TOJR.old$TOJR)
table(TOJR.new$TOJR)
source("~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/DiffCircaPipeline/R/DCP_Rhythmicity.R", echo=TRUE)
CP.obj.new = DCP_Rhythmicity(x1 = CP.obj2$x1, x2 = CP.obj2$x2, amp.cutoff = 0.25)
TOJR.old = CP.obj2$rhythm.joint
TOJR.new = CP.obj.new$rhythm.joint
table(TOJR.old$TOJR)
table(TOJR.new$TOJR)
source("~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/DiffCircaPipeline/R/DCP_Rhythmicity.R", echo=TRUE)
CP.obj.new = DCP_Rhythmicity(x1 = CP.obj2$x1, x2 = CP.obj2$x2, amp.cutoff = 0.25)
TOJR.old = CP.obj2$rhythm.joint
TOJR.new = CP.obj.new$rhythm.joint
table(TOJR.old$TOJR)
table(TOJR.new$TOJR)
CP.obj.new$x1$rhythm[match(TOJR.new$gname[TOJR.new$TOJR!="arrhy"], CP.obj.new$x1$rhythm$gname), "A"]
CP.obj.new$x1$rhythm[match(TOJR.new$gname[TOJR.new$TOJR!="arrhy"], CP.obj.new$x1$rhythm$gname), "A"]
CP.obj$x1$rhythm[match(TOJR.new$gname[TOJR.new$TOJR!="arrhy"], CP.obj$x1$rhythm$gname), "A"]
CP.obj$x1$rhythm[match(TOJR.old$gname[TOJR.old$TOJR!="arrhy"], CP.obj$x1$rhythm$gname), "A"]
CP.obj2$x1$rhythm[match(TOJR.old$gname[TOJR.old$TOJR!="arrhy"], CP.obj2$x1$rhythm$gname), "A"]
CP.obj.new$x1$rhythm[match(TOJR.new$gname[TOJR.new$TOJR!="arrhy"], CP.obj.new$x1$rhythm$gname), "A"]
hist(CP.obj.new$x1$rhythm[match(TOJR.new$gname[TOJR.new$TOJR!="arrhy"], CP.obj.new$x1$rhythm$gname), "A"])
x = CP.obj2
amp0.genes1 = x$x1$rhythm$gname[x$x1$rhythm$A<amp.cutoff]
amp.cutoff = 0.15
amp0.genes1 = x$x1$rhythm$gname[x$x1$rhythm$A<amp.cutoff]
amp0.genes2 = x$x2$rhythm$gname[x$x2$rhythm$A<amp.cutoff]
x$x1$rhythm$gname[x$x1$rhythm$gname %in% amp0.genes1,]
x$x1$rhythm[x$x1$rhythm$gname %in% amp0.genes1, ]
amp0.genes1 = x$x1$rhythm$gname[x$x1$rhythm$A<amp.cutoff]
amp0.genes2 = x$x2$rhythm$gname[x$x2$rhythm$A<amp.cutoff]
amp0.genes = unique(c(amp0.genes1, amp0.genes2))
print(length(amp0.genes))
amp0.status = lapply(amp0.genes, function(a.gene){
if((a.gene %in% amp0.genes1)&(a.gene %in% amp0.genes2)){
return(c(FALSE, FALSE))
}else if((a.gene %in% amp0.genes1)&(!(a.gene %in% amp0.genes2))){
return(c(FALSE, TRUE))
}else{
return(c(TRUE, FALSE))
}
})
amp0.genes.not.arrhy = amp0.genes[amp0.genes%in% x$rhythm.joint$gname[x$rhythm.joint$TOJR!="arrhy"]]
length(amp0.genes.not.arrhy)
amp0.status = lapply(amp0.genes.not.arrhy, function(a.gene){
if((a.gene %in% amp0.genes1)&(a.gene %in% amp0.genes2)){
return(c(FALSE, FALSE))
}else if((a.gene %in% amp0.genes1)&(!(a.gene %in% amp0.genes2))){
return(c(FALSE, TRUE))
}else{
return(c(TRUE, FALSE))
}
})
library(dplyr)
x$x1$rhythm %>% filter(gname %in% amp0.genes.not.arrhy)
x$x2$rhythm %>% filter(gname %in% amp0.genes.not.arrhy)
amp0.status = lapply(amp0.genes.not.arrhy, function(a.gene){
if((a.gene %in% amp0.genes1)&(a.gene %in% amp0.genes2)){
return(c(FALSE, FALSE))
}else if((a.gene %in% amp0.genes1)&(!(a.gene %in% amp0.genes2))){
return(c(FALSE, TRUE))
}else{
return(c(TRUE, FALSE))
}
})
TOJR.to.change = x$rhythm.joint$TOJR[match(amp0.genes.not.arrhy, x$rhythm.joint$gname)]
TOJR.to.change
amp.cut(amp0.status[[a]], TOJR.to.change[a])
a = 1
amp.cut(amp0.status[[a]], TOJR.to.change[a])
amp0.status[[1]]
amp0.genes.not.arrhy[[1]]
x$rhythm.joint %>% fileter(gname == "ENSG00000008283")
x$rhythm.joint %>% filter(gname == "ENSG00000008283")
x$x1$rhythm %>% filter(gname == "ENSG00000008283")
x$x2$rhythm %>% filter(gname == "ENSG00000008283")
x$rhythm.joint$TOJR[match(amp0.genes.not.arrhy, x$rhythm.joint$gname)] = sapply(1:length(amp0.status), function(a){
amp.cut(amp0.status[[a]], TOJR.to.change[a])
})
cbind(TOJR.to.change, x$rhythm.joint$TOJR[match(amp0.genes.not.arrhy, x$rhythm.joint$gname)])
source("~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/R_package_github/DiffCircaPipeline/DiffCircaPipeline/R/DCP_Rhythmicity.R", echo=TRUE)
CP.obj.new = DCP_Rhythmicity(x1 = CP.obj2$x1, x2 = CP.obj2$x2, amp.cutoff = 0.25)
TOJR.old = CP.obj2$rhythm.joint
TOJR.new = CP.obj.new$rhythm.joint
table(TOJR.old$TOJR)
table(TOJR.new$TOJR)
CP.obj.new$x1$rhythm[match(TOJR.new$gname[TOJR.new$TOJR!="arrhy"], CP.obj.new$x1$rhythm$gname), "A"]
CP.obj.new$x1$rhythm[match(TOJR.new$gname[TOJR.new$TOJR=="rhyI"], CP.obj.new$x1$rhythm$gname), "A"]
CP.obj2$x1$rhythm[match(TOJR.old$gname[TOJR.old$TOJR!=="rhyI"], CP.obj2$x1$rhythm$gname), "A"]
CP.obj2$x1$rhythm[match(TOJR.old$gname[TOJR.old$TOJR!=="rhyI"], CP.obj2$x1$rhythm$gname), "A"]
CP.obj2$x1$rhythm[match(TOJR.old$gname[TOJR.old$TOJR=="rhyI"], CP.obj2$x1$rhythm$gname), "A"]
CP.obj.new$x1$rhythm[match(TOJR.new$gname[TOJR.new$TOJR=="rhyI"], CP.obj.new$x1$rhythm$gname), "A"]
CP.obj.new$x2$rhythm[match(TOJR.new$gname[TOJR.new$TOJR=="rhyII"], CP.obj.new$x2$rhythm$gname), "A"]
CP.obj2$x1$rhythm[match(TOJR.old$gname[TOJR.old$TOJR=="rhyI"], CP.obj2$x1$rhythm$gname), "A"]
document()
library(devtools)
library(roxygen2)
document()
load_all()
rm(list = ls())
library(devtools)
library(roxygen2)
document()
load_all()
check()
devtools::install_github("DiffCircaPipeline/Rpackage")
